% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TuneMultiCritControl.R, R/TuneMultiCritControlGrid.R, R/TuneMultiCritControlMBO.R, R/TuneMultiCritControlNSGA2.R, R/TuneMultiCritControlRandom.R
\name{TuneMultiCritControl}
\alias{TuneMultiCritControl}
\alias{TuneMultiCritControlGrid}
\alias{TuneMultiCritControlMBO}
\alias{TuneMultiCritControlNSGA2}
\alias{TuneMultiCritControlRandom}
\alias{makeTuneMultiCritControlGrid}
\alias{makeTuneMultiCritControlMBO}
\alias{makeTuneMultiCritControlNSGA2}
\alias{makeTuneMultiCritControlRandom}
\title{Create control structures for multi-criteria tuning.}
\usage{
makeTuneMultiCritControlGrid(same.resampling.instance = TRUE,
  resolution = 10L, log.fun = "default", final.dw.perc = NULL,
  budget = NULL)

makeTuneMultiCritControlMBO(n.objectives = mbo.control$n.objectives,
  same.resampling.instance = TRUE, impute.val = NULL, learner = NULL,
  mbo.control = NULL, tune.threshold = FALSE,
  tune.threshold.args = list(), continue = FALSE, log.fun = "default",
  final.dw.perc = NULL, budget = NULL, mbo.design = NULL)

makeTuneMultiCritControlNSGA2(same.resampling.instance = TRUE,
  impute.val = NULL, log.fun = "default", final.dw.perc = NULL,
  budget = NULL, ...)

makeTuneMultiCritControlRandom(same.resampling.instance = TRUE,
  maxit = 100L, log.fun = "default", final.dw.perc = NULL,
  budget = NULL)
}
\arguments{
\item{same.resampling.instance}{(`logical(1)`)\cr
Should the same resampling instance be used for all evaluations to reduce variance?
Default is `TRUE`.}

\item{resolution}{([integer])\cr
Resolution of the grid for each numeric/integer parameter in `par.set`.
For vector parameters, it is the resolution per dimension.
Either pass one resolution for all parameters, or a named vector.
See [ParamHelpers::generateGridDesign].
Default is 10.}

\item{log.fun}{(`function` | `character(1)`)\cr
Function used for logging. If set to \dQuote{default} (the default), the evaluated design points, the resulting
performances, and the runtime will be reported.
If set to \dQuote{memory} the memory usage for each evaluation will also be displayed, with `character(1)` small increase
in run time.
Otherwise `character(1)` function with arguments `learner`, `resampling`, `measures`,
`par.set`, `control`, `opt.path`, `dob`, `x`, `y`, `remove.nas`,
`stage` and `prev.stage` is expected.
The default displays the performance measures, the time needed for evaluating,
the currently used memory and the max memory ever used before
(the latter two both taken from [gc]).
See the implementation for details.}

\item{final.dw.perc}{(`boolean`)\cr
If a Learner wrapped by a [makeDownsampleWrapper] is used, you can define the value of `dw.perc` which is used to train the Learner with the final parameter setting found by the tuning.
Default is `NULL` which will not change anything.}

\item{budget}{(`integer(1)`)\cr
Maximum budget for tuning. This value restricts the number of function
evaluations. In case of `makeTuneMultiCritControlGrid` this number
must be identical to the size of the grid. For
`makeTuneMultiCritControlRandom` the `budget` equals the number
of iterations (`maxit`) performed by the random search algorithm.
In case of `makeTuneMultiCritControlNSGA2` the `budget`
corresponds to the product of the maximum number of generations
(`max(generations)`) + 1 (for the initial population) and the size of
the population (`popsize`). For `makeTuneMultiCritControlMBO` the
`budget` equals the number of objective function evaluations, i.e. the
number of MBO iterations + the size of the initial design. If not `NULL`,
this will overwrite existing stopping conditions in `mbo.control`.}

\item{n.objectives}{(`integer(1)`)\cr
Number of objectives, i.e. number of [Measure]s to optimize.}

\item{impute.val}{([numeric])\cr
If something goes wrong during optimization (e.g. the learner crashes),
this value is fed back to the tuner, so the tuning algorithm does not abort.
It is not stored in the optimization path, an NA and a corresponding error message are
logged instead.
Note that this value is later multiplied by -1 for maximization measures internally, so you
need to enter a larger positive value for maximization here as well.
Default is the worst obtainable value of the performance measure you optimize for when
you aggregate by mean value, or `Inf` instead.
For multi-criteria optimization pass a vector of imputation values, one for each of your measures,
in the same order as your measures.}

\item{learner}{([Learner] | `NULL`)\cr
 The surrogate learner: A regression learner to model performance landscape.
For the default, `NULL`, \pkg{mlrMBO} will automatically create a suitable learner based on the rules described in [mlrMBO::makeMBOLearner].}

\item{mbo.control}{([mlrMBO::MBOControl] | `NULL`)\cr
Control object for model-based optimization tuning.
For the default, `NULL`, the control object will be created with all the defaults as described in [mlrMBO::makeMBOControl].}

\item{tune.threshold}{(`logical(1)`)\cr
Should the threshold be tuned for the measure at hand, after each hyperparameter evaluation,
via [tuneThreshold]?
Only works for classification if the predict type is \dQuote{prob}.
Default is `FALSE`.}

\item{tune.threshold.args}{([list])\cr
Further arguments for threshold tuning that are passed down to [tuneThreshold].
Default is none.}

\item{continue}{(`logical(1)`)\cr
Resume calculation from previous run using [mlrMBO::mboContinue]?
Requires \dQuote{save.file.path} to be set.
Note that the [ParamHelpers::OptPath] in the [mlrMBO::OptResult]
will only include the evaluations after the continuation.
The complete [OptPath] will be found in the slot `$mbo.result$opt.path`.}

\item{mbo.design}{([data.frame] | `NULL`)\cr
Initial design as data frame.
If the parameters have corresponding trafo functions,
the design must not be transformed before it is passed!
For the default, `NULL`, a default design is created like described in [mlrMBO::mbo].}

\item{...}{(any)\cr
Further control parameters passed to the `control` arguments of
[cmaes::cma_es] or [GenSA::GenSA], as well as
towards the `tunerConfig` argument of [irace::irace].}

\item{maxit}{(`integer(1)`)\cr
Number of iterations for random search.
Default is 100.}
}
\value{
([TuneMultiCritControl]). The specific subclass is one of
  [TuneMultiCritControlGrid], [TuneMultiCritControlRandom],
  [TuneMultiCritControlNSGA2], [TuneMultiCritControlMBO].
}
\description{
The following tuners are available:
\describe{
  \item{makeTuneMultiCritControlGrid}{Grid search. All kinds of parameter types can be handled.
    You can either use their correct param type and `resolution`,
    or discretize them yourself by always using [ParamHelpers::makeDiscreteParam]
    in the `par.set` passed to [tuneParams].}
  \item{makeTuneMultiCritControlRandom}{Random search. All kinds of parameter types can be handled.}
  \item{makeTuneMultiCritControlNSGA2}{Evolutionary method [mco::nsga2].
    Can handle numeric(vector) and integer(vector) hyperparameters, but no dependencies.
    For integers the internally proposed numeric values are automatically rounded.}
  \item{makeTuneMultiCritControlMBO}{Model-based/ Bayesian optimization. All kinds of
    parameter types can be handled.}
}
}
\seealso{
Other tune_multicrit: \code{\link{plotTuneMultiCritResult}},
  \code{\link{tuneParamsMultiCrit}}
}

